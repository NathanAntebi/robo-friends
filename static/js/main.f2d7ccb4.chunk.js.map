{"version":3,"sources":["Card.js","CardList.js","SearchField.js","App.js","serviceWorker.js","index.js"],"names":["Card","react_default","a","createElement","className","src","concat","this","props","id","name","email","Component","CardList","_this","cardComponent","robots","map","user","i","src_Card","SearchField","onChange","type","placeholder","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeText","event","setState","search","target","value","console","log","state","_this2","fetch","then","response","json","_this3","filteredRobots","filter","robot","toLowerCase","includes","src_SearchField","src_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4LAeeA,mLAVb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BC,KAAKC,MAAMC,GAArC,cACRR,EAAAC,EAAAC,cAAA,UAAKI,KAAKC,MAAME,MAChBT,EAAAC,EAAAC,cAAA,UAAKI,KAAKC,MAAMG,eANAC,aCcJC,mLAbN,IAAAC,EAAAP,KACDQ,EAAgBR,KAAKC,MAAMQ,OAAOC,IAAI,SAACC,EAAMC,GAClD,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,CAAMV,KAAMI,EAAKN,MAAMQ,OAAOG,GAAGT,KAAMC,MAAOG,EAAKN,MAAMQ,OAAOG,GAAGR,MAAOF,GAAIK,EAAKN,MAAMQ,OAAOG,GAAGV,OAE3G,OACCR,EAAAC,EAAAC,cAAA,WACEY,UAPkBH,aCMRS,QANK,SAACb,GACpB,OAAOP,EAAAC,EAAAC,cAAA,SAAOC,UAAU,wBAAwBkB,SAAUd,EAAMc,SAAUC,KAAK,OAAOC,YAAY,uBCqCpFC,cAjCd,SAAAA,EAAYjB,GAAM,IAAAM,EAAA,OAAAY,OAAAC,EAAA,EAAAD,CAAAnB,KAAAkB,IACjBX,EAAAY,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAvB,KAAMC,KAaPuB,WAAa,SAACC,GACblB,EAAKmB,SAAS,CAACC,OAAQF,EAAMG,OAAOC,QACpCC,QAAQC,IAAIN,EAAMG,OAAOC,QAdzBtB,EAAKyB,MAAM,CACVL,OAAQ,GACRlB,OAAQ,IAJQF,mFAQC,IAAA0B,EAAAjC,KAClBkC,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAxB,GAAI,OAAIsB,EAAKP,SAAS,CAACjB,OAAQE,uCAQhC,IAAA2B,EAAAtC,KACDuC,EAAiBvC,KAAKgC,MAAMvB,OAAO+B,OAAO,SAAAC,GAC/C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASL,EAAKN,MAAML,OAAOe,iBAE5D,OACChD,EAAAC,EAAAC,cAAA,OAAKC,UAAW,MACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACgD,EAAD,CAAa7B,SAAUf,KAAKwB,aAC5B9B,EAAAC,EAAAC,cAACiD,EAAD,CAAUpC,OAAQ8B,YA5BJlC,mBCKEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.f2d7ccb4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nclass Card extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"bg-light-green dib pa3 ma2 grow tc br3\">\r\n\t\t\t<img src={`https://robohash.org/${this.props.id}?200x200`}/>\r\n\t\t\t<h1>{this.props.name}</h1>\r\n\t\t\t<h2>{this.props.email}</h2>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Card","import React, { Component } from 'react';\r\nimport Card from \"./Card.js\"\r\n\r\nclass CardList extends Component{\r\n\trender(){\r\n\t\tconst cardComponent = this.props.robots.map((user, i) => {\r\n\t\t\treturn <Card name={this.props.robots[i].name} email={this.props.robots[i].email} id={this.props.robots[i].id} />\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{cardComponent}\r\n\t\t\t\t\r\n\t\t\t\t</div>\r\n\r\n\t\t\t)\r\n\t}\r\n}\r\nexport default CardList;","import React from 'react'\r\nimport 'tachyons'\r\n\r\nconst SearchField = (props) => {\r\n\treturn <input className=\"bg-light-blue pa3 ma3\" onChange={props.onChange} type=\"text\" placeholder=\"Search for robot\" />\r\n\t\t\t\r\n\t\t\r\n}\r\n\r\nexport default SearchField;","import React, { Component } from 'react'\r\nimport { robots } from './Robots';\r\nimport CardList from \"./CardList\";\r\nimport SearchField from './SearchField'\r\nimport 'tachyons'\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tsearch: '',\r\n\t\t\trobots: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t  .then(response => response.json())\r\n\t\t  .then(user => this.setState({robots: user}))\r\n\t}\r\n\r\n\tchangeText = (event) => {\r\n\t\tthis.setState({search: event.target.value})\r\n\t\tconsole.log(event.target.value);\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.search.toLowerCase())\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div className= \"tc\">\r\n\t\t\t\t<h1>ROBOFRIENDS</h1>\r\n\t\t\t\t<SearchField onChange={this.changeText} />\r\n\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t</div>\r\n\t\t     )\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Card from './Card';\nimport App from \"./App\";\nimport 'tachyons';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}